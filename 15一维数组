#include<bits/stdc++.h>
using namespace std;
int main(){
	/*数组
	数组就是一个集合，里面存放了相同类型的数据元素
	特点：1.数组中的每个数据元素都是相同的数据类型
		  2.数组是由连续的内存位置组成
	一维数组的、定义的三种方式：
	1.数据类型 数组名 [数组长度];
	2.数据类型 数组名 [数组长度] = {值1, 值2……}; 
	3.数据类型 数组名 [] = {值1, 值2……};
	可以通过下标访问数组中的元素
	数组元素的下标是从0开始索引*/
	
	// 1.数据类型 数组名 [数组长度];
	int arr[3];
	arr[0] = 10;
	arr[1] = 20;
	cout<<"输入整数:";
	cin>>arr[2];
	cout<<"arr[1]的值是:"<<arr[1]<<endl; 
	cout<<"arr[2]的值是:"<<arr[2]<<endl;
	
	// 2.数据类型 数组名 [数组长度] = {值1, 值2……};
	string arr_ch[4] = {"一", "二", "三", "四"};
	for(int i=0;i<4;i++) {cout<<arr_ch[i]<<endl;}
	
	// 3.数据类型 数组名 [] = {值1, 值2……};
	// 定义数组的时候, 必须有初始长度,初始长度可以通过值的数量自动判断 
	float arr_fl[]={0.1,0.2,0.3,0.4};
	for(int i=0;i<4;i++) {cout<<arr_fl[i]<<endl;}
	 
	/*一维数组名称用途：
	   1.可以统计整个数组在内存中的长度*/
	cout<<"数组arr_ch中第一个元素占内存的长度为："<<sizeof(arr_ch[0])<<endl;
	cout<<"数组arr_ch占内存的长度为："<<sizeof(arr_ch)<<endl;
	cout<<"数组arr_ch中的元素个数为："<<sizeof(arr_ch)/sizeof(arr_ch[0])<<endl;
	
	// 2.可以获取数组在内存中的首地址(地址是一个16进制的数) 
	cout<<"数组arr_ch的首地址为："<<arr_ch<<endl;
	cout<<"数组arr_ch的第一个元素的首地址为："<<&arr_ch[0]<<endl; // 数组名是常量，不可进行赋值操作 

	
	// 案例：五只小猪称体重
	int max = 0, arr_h[5] = {300, 250, 400, 350, 450 };
	for(int i = 0; i < 5; i++)
	{
		if (max < arr_h[i]) max = arr_h[i]; // 如果访问数组中的元素比认定的最大值大，则更新最大值 
	}
	cout<<"最重的小猪是："<<max;
	return 0;
}
